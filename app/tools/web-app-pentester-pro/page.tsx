"use client";

import React, { useState, useEffect, useRef, Fragment } from "react";
import {
	Chart as ChartJS,
	ArcElement,
	Tooltip,
	Legend,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	RadialLinearScale,
	PointElement,
	LineElement,
} from "chart.js";
import { Doughnut, Bar, Radar } from "react-chartjs-2";
import Link from "next/link";

// Register ChartJS components
ChartJS.register(
	ArcElement,
	Tooltip,
	Legend,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	RadialLinearScale,
	PointElement,
	LineElement
);

// Define types for scan results
interface Vulnerability {
	id: string;
	name: string;
	type: string;
	description: string;
	severity: "Critical" | "High" | "Medium" | "Low" | "Info";
	details: Record<string, any>;
	remediation: string;
}

interface ScanResults {
	target_url: string;
	scan_time: string;
	scan_duration: string;
	scan_mode: "lightweight" | "comprehensive";
	vulnerabilities: Vulnerability[];
	statistics: {
		critical_count: number;
		high_count: number;
		medium_count: number;
		low_count: number;
		info_count: number;
		total_requests: number;
		scan_coverage_percent: number;
	};
	tech_stack: string[];
	dom_xss_results?: Record<string, any>;
	ssrf_ssti_results?: Record<string, any>;
	spa_analysis?: Record<string, any>;
	summary?: string;
}

// Chart components for visualizing results
const VulnerabilitySummaryChart = ({ statistics }: { statistics: any }) => {
	if (!statistics) return null;

	const data = {
		labels: ["Critical", "High", "Medium", "Low", "Info"],
		datasets: [
			{
				label: "Vulnerabilities Found",
				data: [
					statistics.critical_count || 0,
					statistics.high_count || 0,
					statistics.medium_count || 0,
					statistics.low_count || 0,
					statistics.info_count || 0,
				],
				backgroundColor: [
					"rgba(136, 8, 8, 0.7)", // Darker red for critical
					"rgba(220, 38, 38, 0.7)", // red-600 for high
					"rgba(245, 158, 11, 0.7)", // amber-500 for medium
					"rgba(16, 185, 129, 0.7)", // emerald-500 for low
					"rgba(59, 130, 246, 0.7)", // blue-500 for info
				],
				borderColor: [
					"rgb(136, 8, 8)",
					"rgb(220, 38, 38)",
					"rgb(245, 158, 11)",
					"rgb(16, 185, 129)",
					"rgb(59, 130, 246)",
				],
				borderWidth: 1,
			},
		],
	};

	const options = {
		responsive: true,
		maintainAspectRatio: false,
		plugins: {
			legend: {
				position: "right" as const,
			},
			title: {
				display: true,
				text: "Vulnerability Distribution",
				color: "#1e3a8a", // blue-900
				font: {
					size: 16,
				},
			},
		},
	};

	return (
		<div className="h-64 md:h-80">
			<Doughnut data={data} options={options} />
		</div>
	);
};

const SecurityScoreChart = ({ statistics }: { statistics: any }) => {
	if (!statistics) return null;

	// Calculate a security score based on findings
	// Critical and high issues have the most impact
	const criticalImpact = (statistics.critical_count || 0) * 20;
	const highImpact = (statistics.high_count || 0) * 10;
	const mediumImpact = (statistics.medium_count || 0) * 5;
	const lowImpact = (statistics.low_count || 0) * 2;

	const totalImpact = criticalImpact + highImpact + mediumImpact + lowImpact;
	// Score from 0-100, where 100 is perfect (no issues)
	let securityScore = Math.max(0, 100 - totalImpact);

	// Determine color based on score
	let color;
	if (securityScore >= 80) {
		color = "rgba(16, 185, 129, 0.7)"; // emerald-500
	} else if (securityScore >= 60) {
		color = "rgba(245, 158, 11, 0.7)"; // amber-500
	} else {
		color = "rgba(220, 38, 38, 0.7)"; // red-600
	}

	const data = {
		labels: ["Security Score"],
		datasets: [
			{
				label: "Score",
				data: [securityScore],
				backgroundColor: [color],
				borderColor: [color.replace("0.7", "1")],
				borderWidth: 1,
			},
		],
	};

	const options = {
		responsive: true,
		maintainAspectRatio: false,
		plugins: {
			legend: {
				display: false,
			},
			title: {
				display: true,
				text: "Security Score",
				color: "#1e3a8a", // blue-900
				font: {
					size: 16,
				},
			},
		},
		scales: {
			y: {
				beginAtZero: true,
				max: 100,
				ticks: {
					callback: function (value: any) {
						return value + "%";
					},
				},
			},
		},
	};

	return (
		<div className="h-64">
			<Bar data={data} options={options} />
		</div>
	);
};

export default function WebAppPentesterProPage() {
	const [url, setUrl] = useState("");
	const [scanMode, setScanMode] = useState<"lightweight" | "comprehensive">(
		"lightweight"
	);
	const [isScanning, setIsScanning] = useState(false);
	const [scanComplete, setScanComplete] = useState(false);
	const [progress, setProgress] = useState(0);
	const [consoleOutput, setConsoleOutput] = useState<string[]>([]);
	const [results, setResults] = useState<ScanResults | null>(null);
	const [expandedSections, setExpandedSections] = useState<
		Record<string, boolean>
	>({});
	const [expandedVulnerabilities, setExpandedVulnerabilities] = useState<
		Record<string, boolean>
	>({});
	const consoleRef = useRef<HTMLDivElement>(null);
	const [error, setError] = useState<string | null>(null);

	// Auto-scroll console output to bottom
	useEffect(() => {
		if (consoleRef.current) {
			consoleRef.current.scrollTop = consoleRef.current.scrollHeight;
		}
	}, [consoleOutput]);

	const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();

		if (!url) {
			setError("Please enter a valid URL to scan.");
			return;
		}

		// Reset states
		setError(null);
		setIsScanning(true);
		setScanComplete(false);
		setProgress(0);
		setConsoleOutput([]);
		setResults(null);

		try {
			addConsoleMessage(`Starting ${scanMode} scan of ${url}...`);

			// Set up progress simulation
			const progressInterval = setInterval(() => {
				setProgress((prev) => {
					if (prev >= 95) {
						clearInterval(progressInterval);
						return prev;
					}
					return prev + Math.floor(Math.random() * 5) + 1;
				});
			}, 500);

			// Simulate scanning progress with console messages
			setTimeout(
				() => addConsoleMessage("Initializing scan environment..."),
				800
			);
			setTimeout(
				() => addConsoleMessage("Checking target accessibility..."),
				1500
			);
			setTimeout(
				() => addConsoleMessage("Performing initial reconnaissance..."),
				2200
			);
			setTimeout(
				() => addConsoleMessage("Analyzing HTTP responses and headers..."),
				3000
			);

			if (scanMode === "comprehensive") {
				setTimeout(
					() => addConsoleMessage("Starting in-depth JavaScript analysis..."),
					4000
				);
				setTimeout(
					() =>
						addConsoleMessage("Testing for DOM-based XSS vulnerabilities..."),
					5500
				);
				setTimeout(
					() =>
						addConsoleMessage(
							"Checking for template injection opportunities..."
						),
					7000
				);
				setTimeout(
					() =>
						addConsoleMessage(
							"Analyzing form submissions and state management..."
						),
					9000
				);
			} else {
				setTimeout(
					() =>
						addConsoleMessage(
							"Performing lightweight scanning of endpoints..."
						),
					3800
				);
				setTimeout(
					() => addConsoleMessage("Checking basic security configurations..."),
					5000
				);
			}

			// Make the actual API call - the timing is just simulated for UX
			// In a real implementation, the progress would be updated from the backend
			const scanDuration = scanMode === "comprehensive" ? 10000 : 6000;

			setTimeout(async () => {
				try {
					const response = await fetch("/api/tools/web-app-pentester-pro", {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify({
							url,
							scanMode,
						}),
					});

					if (!response.ok) {
						throw new Error(`Server responded with status: ${response.status}`);
					}

					const data: ScanResults = await response.json();

					// Complete the progress and set results
					clearInterval(progressInterval);
					setProgress(100);
					addConsoleMessage("Scan complete! Processing results...");

					setResults(data);
					setScanComplete(true);
				} catch (apiError) {
					console.error("API error:", apiError);
					setError(
						`Failed to get scan results: ${
							apiError instanceof Error ? apiError.message : "Unknown error"
						}`
					);
				} finally {
					setIsScanning(false);
				}
			}, scanDuration);
		} catch (err) {
			setError("An error occurred during scanning. Please try again.");
			setIsScanning(false);
			console.error("Scan error:", err);
		}
	};

	const addConsoleMessage = (message: string) => {
		setConsoleOutput((prev) => [
			...prev,
			`[${new Date().toLocaleTimeString()}] ${message}`,
		]);
	};

	const handleCancelScan = () => {
		setIsScanning(false);
		addConsoleMessage("Scan cancelled by user.");
	};

	const toggleSection = (section: string) => {
		setExpandedSections((prev) => ({
			...prev,
			[section]: !prev[section],
		}));
	};

	const toggleVulnerability = (id: string) => {
		setExpandedVulnerabilities((prev) => ({
			...prev,
			[id]: !prev[id],
		}));
	};

	return (
		<div className="max-w-7xl mx-auto px-4 py-12">
			{/* Navigation */}
			<div className="mb-6 flex items-center text-sm">
				<Link href="/tools" className="text-blue-600 hover:text-blue-800">
					‚Üê Back to Tools
				</Link>
				<span className="mx-2 text-gray-500">/</span>
				<span className="text-gray-700">Web App Pentester Pro</span>
			</div>

			<div className="text-center mb-10">
				<div className="bg-gray-800 text-white py-12 px-6 rounded-lg shadow-lg mb-12">
					<h1 className="text-4xl font-bold mb-3">
						Flexgen Web App Pentester Pro
					</h1>
					<div className="flex justify-center items-center gap-2 mb-4">
						<span className="text-sm font-medium bg-white bg-opacity-20 text-white px-3 py-1 rounded-full">
							Beta
						</span>
					</div>
					<p className="text-lg max-w-3xl mx-auto">
						Advanced web application security assessment tool for identifying
						vulnerabilities in enterprise applications
					</p>
				</div>
			</div>

			{/* Scan Form */}
			<div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-8 mb-12 border border-gray-100">
				<form onSubmit={handleSubmit}>
					<div className="mb-6">
						<label
							htmlFor="url"
							className="block text-gray-800 font-semibold mb-2"
						>
							Target URL
						</label>
						<input
							type="url"
							id="url"
							placeholder="https://example.com"
							className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-gray-800"
							value={url}
							onChange={(e) => setUrl(e.target.value)}
							required
							disabled={isScanning}
						/>
						<p className="text-xs text-gray-500 mt-2">
							Enter the complete URL including http:// or https:// prefix
						</p>
					</div>

					<div className="mb-6">
						<label className="block text-gray-800 font-semibold mb-3">
							Scan Mode
						</label>
						<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
							<label className="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer transition-all duration-200 hover:border-blue-500 hover:shadow-sm">
								<input
									type="radio"
									id="lightweight"
									name="scanMode"
									value="lightweight"
									checked={scanMode === "lightweight"}
									onChange={() => setScanMode("lightweight")}
									disabled={isScanning}
									className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500"
								/>
								<div className="ml-3">
									<span className="block font-medium text-gray-800">
										Lightweight Assessment
									</span>
									<span className="text-sm text-gray-500">
										5-10 minutes, basic coverage
									</span>
								</div>
							</label>
							<label className="flex items-center p-4 border border-gray-200 rounded-lg cursor-pointer transition-all duration-200 hover:border-blue-500 hover:shadow-sm">
								<input
									type="radio"
									id="comprehensive"
									name="scanMode"
									value="comprehensive"
									checked={scanMode === "comprehensive"}
									onChange={() => setScanMode("comprehensive")}
									disabled={isScanning}
									className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500"
								/>
								<div className="ml-3">
									<span className="block font-medium text-gray-800">
										Comprehensive Assessment
									</span>
									<span className="text-sm text-gray-500">
										15-30 minutes, in-depth analysis
									</span>
								</div>
							</label>
						</div>
						<p className="text-xs text-gray-500 mt-2">
							Comprehensive assessment includes SPA analysis, DOM XSS detection,
							and SSRF/SSTI payload testing
						</p>
					</div>

					<div className="mb-6 p-5 bg-gray-50 rounded-lg border border-gray-200">
						<label className="flex items-start cursor-pointer">
							<input
								type="checkbox"
								checked={true}
								className="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
								disabled={isScanning}
								readOnly
							/>
							<span className="ml-3 text-sm text-gray-800">
								I confirm that I have legal authority to scan this URL and
								understand that scanning websites without permission may violate
								laws and terms of service. I accept all legal responsibility for
								this scan.
							</span>
						</label>
					</div>

					{error && (
						<div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
							<p className="text-red-700">{error}</p>
						</div>
					)}

					<button
						type="submit"
						disabled={isScanning || !url}
						className={`w-full py-3 px-4 rounded-lg text-white font-medium transition-all duration-300 ${
							isScanning || !url
								? "bg-gray-300 cursor-not-allowed"
								: "bg-gray-800 hover:bg-black shadow-md hover:shadow-lg"
						}`}
					>
						{isScanning ? "Scanning..." : "Start Web App Security Scan"}
					</button>
				</form>
			</div>

			{/* Progress and Console Output */}
			{isScanning && (
				<div className="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-8 mb-12">
					<div className="mb-4">
						<div className="flex justify-between mb-3">
							<span className="text-sm font-medium text-gray-700">
								{progress < 100 ? "Scanning in progress..." : "Scan complete!"}
							</span>
							<span className="text-sm font-medium text-gray-700">
								{progress}%
							</span>
						</div>
						<div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
							<div
								className="bg-blue-600 h-4 rounded-full transition-all duration-300 ease-in-out"
								style={{ width: `${progress}%` }}
							></div>
						</div>
					</div>
					<div className="mt-6">
						<div className="flex justify-between items-center mb-3">
							<h3 className="text-md font-semibold text-gray-700">
								Console Output
							</h3>
							<button
								onClick={handleCancelScan}
								className="text-sm text-red-600 hover:text-red-800 font-medium transition-colors duration-200 px-3 py-1 rounded hover:bg-red-50"
								disabled={!isScanning}
							>
								Stop Scan
							</button>
						</div>
						<div
							ref={consoleRef}
							className="bg-gray-900 text-green-400 font-mono text-xs p-5 rounded-lg h-64 overflow-y-auto shadow-inner"
						>
							{consoleOutput.map((line, i) => (
								<div key={i} className="mb-1">
									{line}
								</div>
							))}
						</div>
					</div>
				</div>
			)}

			{/* Results */}
			{scanComplete && results && (
				<div className="max-w-6xl mx-auto">
					<div className="bg-white rounded-lg shadow-lg overflow-hidden mb-12">
						<div className="bg-gray-800 text-white p-6">
							<h2 className="text-2xl font-bold">Scan Results</h2>
							<p className="text-sm mt-2 text-gray-300">
								Target: {results.target_url} | Scan mode: {results.scan_mode} |
								Completed: {new Date(results.scan_time).toLocaleString()}
							</p>
						</div>

						<div className="p-8">
							<div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
								<div className="bg-gray-50 p-4 rounded-md">
									<h3 className="font-medium mb-2">Scan Information</h3>
									<div className="grid grid-cols-2 gap-2 text-sm">
										<div className="text-gray-600">Target URL:</div>
										<div>{results.target_url}</div>
										<div className="text-gray-600">Scan Time:</div>
										<div>{new Date(results.scan_time).toLocaleString()}</div>
										<div className="text-gray-600">Duration:</div>
										<div>{results.scan_duration}</div>
										<div className="text-gray-600">Mode:</div>
										<div className="capitalize">{results.scan_mode}</div>
										<div className="text-gray-600">Coverage:</div>
										<div>{results.statistics.scan_coverage_percent}%</div>
									</div>
								</div>
								<div className="bg-gray-50 p-4 rounded-md">
									<h3 className="font-medium mb-2">Detected Technologies</h3>
									<div className="flex flex-wrap gap-2">
										{results.tech_stack.map((tech, index) => (
											<span
												key={index}
												className="px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs"
											>
												{tech}
											</span>
										))}
									</div>
								</div>
							</div>

							{/* Result Summary */}
							<div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
								<VulnerabilitySummaryChart statistics={results.statistics} />
								<SecurityScoreChart statistics={results.statistics} />
							</div>

							{/* Summary Findings */}
							{results.summary && (
								<div className="mb-8">
									<h3 className="text-xl font-bold mb-2">Executive Summary</h3>
									<div className="bg-blue-50 p-4 rounded-md text-blue-800">
										{results.summary}
									</div>
								</div>
							)}

							{/* Vulnerabilities Table */}
							<div className="mb-8">
								<h3 className="text-xl font-bold mb-4">
									Vulnerabilities ({results.vulnerabilities.length})
								</h3>

								{results.vulnerabilities.length > 0 ? (
									<div className="overflow-x-auto">
										<table className="w-full border-collapse">
											<thead>
												<tr className="bg-gray-100">
													<th className="px-4 py-2 text-left">Severity</th>
													<th className="px-4 py-2 text-left">Vulnerability</th>
													<th className="px-4 py-2 text-left">Type</th>
													<th className="px-4 py-2 text-left">Actions</th>
												</tr>
											</thead>
											<tbody>
												{results.vulnerabilities.map((vuln) => (
													<Fragment key={vuln.id}>
														<tr className="border-b hover:bg-gray-50">
															<td className="px-4 py-3">
																<span
																	className={`px-2 py-1 rounded-md text-xs font-medium ${
																		vuln.severity === "Critical"
																			? "bg-red-900 text-white"
																			: vuln.severity === "High"
																			? "bg-red-600 text-white"
																			: vuln.severity === "Medium"
																			? "bg-amber-500 text-white"
																			: vuln.severity === "Low"
																			? "bg-emerald-500 text-white"
																			: "bg-blue-500 text-white"
																	}`}
																>
																	{vuln.severity}
																</span>
															</td>
															<td className="px-4 py-3 font-medium">
																{vuln.name}
															</td>
															<td className="px-4 py-3">{vuln.type}</td>
															<td className="px-4 py-3">
																<button
																	onClick={() => toggleVulnerability(vuln.id)}
																	className="text-blue-600 hover:underline"
																>
																	{expandedVulnerabilities[vuln.id]
																		? "Hide"
																		: "Details"}
																</button>
															</td>
														</tr>
														{expandedVulnerabilities[vuln.id] && (
															<tr>
																<td
																	colSpan={4}
																	className="px-4 py-3 bg-gray-50"
																>
																	<div className="p-2">
																		<div className="mb-3">
																			<h4 className="font-medium">
																				Description
																			</h4>
																			<p className="text-gray-700 text-sm mt-1">
																				{vuln.description}
																			</p>
																		</div>

																		<div className="mb-3">
																			<h4 className="font-medium">Details</h4>
																			<pre className="bg-gray-100 p-2 rounded-md text-xs overflow-x-auto mt-1">
																				{JSON.stringify(vuln.details, null, 2)}
																			</pre>
																		</div>

																		<div>
																			<h4 className="font-medium">
																				Remediation
																			</h4>
																			<p className="text-gray-700 text-sm mt-1">
																				{vuln.remediation}
																			</p>
																		</div>
																	</div>
																</td>
															</tr>
														)}
													</Fragment>
												))}
											</tbody>
										</table>
									</div>
								) : (
									<div className="bg-green-50 p-4 rounded-md text-green-800">
										No vulnerabilities were found during this scan.
									</div>
								)}
							</div>

							{/* Advanced Results Sections */}
							<div className="space-y-5 mt-10">
								{results.dom_xss_results && (
									<div className="border border-gray-200 rounded-lg overflow-hidden transition-all duration-300 hover:shadow-md">
										<button
											onClick={() => toggleSection("dom_xss")}
											className="w-full flex justify-between items-center p-5 bg-gray-50 hover:bg-gray-100 text-left font-medium text-gray-800"
										>
											<span className="flex items-center">
												<span className="mr-3 text-lg">üîç</span>
												DOM XSS Analysis
											</span>
											<span className="text-lg text-blue-600 flex items-center justify-center w-6 h-6 rounded-full bg-white shadow-sm">
												{expandedSections.dom_xss ? "‚àí" : "+"}
											</span>
										</button>
										{expandedSections.dom_xss && (
											<div className="p-5 text-sm bg-white border-t border-gray-100">
												<pre className="bg-gray-100 p-3 rounded-md text-sm overflow-x-auto">
													{JSON.stringify(results.dom_xss_results, null, 2)}
												</pre>
											</div>
										)}
									</div>
								)}

								{results.ssrf_ssti_results && (
									<div className="border border-gray-200 rounded-lg overflow-hidden transition-all duration-300 hover:shadow-md">
										<button
											onClick={() => toggleSection("ssrf_ssti")}
											className="w-full flex justify-between items-center p-5 bg-gray-50 hover:bg-gray-100 text-left font-medium text-gray-800"
										>
											<span className="flex items-center">
												<span className="mr-3 text-lg">üß™</span>
												SSRF/SSTI Injection Tests
											</span>
											<span className="text-lg text-blue-600 flex items-center justify-center w-6 h-6 rounded-full bg-white shadow-sm">
												{expandedSections.ssrf_ssti ? "‚àí" : "+"}
											</span>
										</button>
										{expandedSections.ssrf_ssti && (
											<div className="p-5 text-sm bg-white border-t border-gray-100">
												<pre className="bg-gray-100 p-3 rounded-md text-sm overflow-x-auto">
													{JSON.stringify(results.ssrf_ssti_results, null, 2)}
												</pre>
											</div>
										)}
									</div>
								)}

								{results.spa_analysis && (
									<div className="border border-gray-200 rounded-lg overflow-hidden transition-all duration-300 hover:shadow-md">
										<button
											onClick={() => toggleSection("spa_analysis")}
											className="w-full flex justify-between items-center p-5 bg-gray-50 hover:bg-gray-100 text-left font-medium text-gray-800"
										>
											<span className="flex items-center">
												<span className="mr-3 text-lg">üì±</span>
												SPA Application Analysis
											</span>
											<span className="text-lg text-blue-600 flex items-center justify-center w-6 h-6 rounded-full bg-white shadow-sm">
												{expandedSections.spa_analysis ? "‚àí" : "+"}
											</span>
										</button>
										{expandedSections.spa_analysis && (
											<div className="p-5 text-sm bg-white border-t border-gray-100">
												<pre className="bg-gray-100 p-3 rounded-md text-sm overflow-x-auto">
													{JSON.stringify(results.spa_analysis, null, 2)}
												</pre>
											</div>
										)}
									</div>
								)}
							</div>
						</div>
					</div>
				</div>
			)}

			{/* About Section */}
			<div className="max-w-3xl mx-auto mt-16 mb-12">
				<div className="bg-white rounded-lg shadow-lg overflow-hidden">
					<div className="bg-gray-800 text-white p-6">
						<h2 className="text-2xl font-bold">About Web App Pentester Pro</h2>
					</div>
					<div className="p-8">
						<p className="mb-6 text-gray-700 leading-relaxed">
							Flexgen Web App Pentester Pro is an advanced penetration testing
							suite for enterprise-grade web application security assessments,
							featuring:
						</p>
						<div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
							<div className="bg-gray-50 rounded-lg p-5 shadow-sm">
								<ul className="space-y-3">
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											DOM-based XSS Detection
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											Runtime JavaScript Analysis
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											SSRF Vulnerability Testing
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											Template Injection Detection
										</span>
									</li>
								</ul>
							</div>
							<div className="bg-gray-50 rounded-lg p-5 shadow-sm">
								<ul className="space-y-3">
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											SPA Framework Analysis
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											State Management Assessment
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											Plain-English Vulnerability Reports
										</span>
									</li>
									<li className="flex items-center">
										<span className="mr-2 text-blue-600">‚úì</span>
										<span className="text-gray-800">
											Detailed Remediation Guidance
										</span>
									</li>
								</ul>
							</div>
						</div>
						<div className="mb-8">
							<p className="text-gray-700 leading-relaxed">
								Each vulnerability is automatically tagged with a severity level
								(Critical, High, Medium, Low, Info) for clear prioritization and
								efficient remediation planning.
							</p>
						</div>
						<div className="bg-yellow-50 text-yellow-800 p-6 rounded-lg shadow-md">
							<p className="font-semibold mb-3">‚ö†Ô∏è Legal Disclaimer:</p>
							<p className="text-sm leading-relaxed">
								This tool is in beta and intended for security research purposes
								only. Only scan websites you own or have explicit permission to
								test. Unauthorized scanning may violate computer fraud and abuse
								laws, terms of service agreements, and other regulations.
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
