"use client";

import { useState, useEffect, useRef } from "react";
import {
	Chart as ChartJS,
	ArcElement,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	Tooltip,
	Legend,
	RadialLinearScale,
	PointElement,
	LineElement,
} from "chart.js";
import { Doughnut, Bar } from "react-chartjs-2";
import Link from "next/link";

// Register ChartJS components
ChartJS.register(
	ArcElement,
	Tooltip,
	Legend,
	CategoryScale,
	LinearScale,
	BarElement,
	Title,
	RadialLinearScale,
	PointElement,
	LineElement
);

// Define types for vulnerability scanner
interface Vulnerability {
	id: string;
	name: string;
	description: string;
	severity: "Critical" | "High" | "Medium" | "Low" | "Info";
	cve?: string;
	cvss?: number;
	affected_component: string;
	details: string;
	remediation: string;
	discovered: string;
	status: "Open" | "Fixed" | "In Progress" | "False Positive";
	category: string;
}

interface AssetScan {
	id: string;
	asset_name: string;
	asset_type:
		| "Server"
		| "Application"
		| "API"
		| "Network"
		| "Cloud"
		| "Container";
	ip_address?: string;
	scan_date: string;
	scan_duration: number; // in seconds
	vulnerabilities: Vulnerability[];
	summary: {
		critical_count: number;
		high_count: number;
		medium_count: number;
		low_count: number;
		info_count: number;
		total_count: number;
		risk_score: number;
	};
}

interface Dashboard {
	recent_scans: AssetScan[];
}

export default function VulnerabilityScannerPage() {
	const [scanInProgress, setScanInProgress] = useState<boolean>(false);
	const [scanProgress, setScanProgress] = useState<number>(0);
	const [dashboard, setDashboard] = useState<Dashboard | null>(null);
	const [targetAsset, setTargetAsset] = useState<string>("");
	const [assetType, setAssetType] = useState<string>("Application");
	const [selectedVulnerability, setSelectedVulnerability] =
		useState<Vulnerability | null>(null);
	const [selectedScan, setSelectedScan] = useState<AssetScan | null>(null);
	const [filterCategory, setFilterCategory] = useState<string>("All");
	const [filterSeverity, setFilterSeverity] = useState<string>("All");
	const [filterStatus, setFilterStatus] = useState<string>("All");

	// Load dashboard data when component mounts
	useEffect(() => {
		loadDashboardData();
	}, []);

	const loadDashboardData = async () => {
		try {
			// In a real application, this would be an API call
			// For now, we'll simulate loading with sample data
			setTimeout(() => {
				setDashboard(getSampleDashboardData());
			}, 1000);
		} catch (error) {
			console.error("Error loading dashboard data:", error);
		}
	};

	const handleStartScan = (e: React.FormEvent) => {
		e.preventDefault();
		if (!targetAsset.trim()) return;

		setScanInProgress(true);
		setScanProgress(0);

		// Simulate scan progress
		const interval = setInterval(() => {
			setScanProgress((prev) => {
				const newProgress = prev + Math.random() * 10;
				if (newProgress >= 100) {
					clearInterval(interval);
					setScanInProgress(false);
					// Add a new scan to the dashboard data
					if (dashboard) {
						const newScan: AssetScan = {
							id: `scan-${Date.now()}`,
							asset_name: targetAsset,
							asset_type: assetType as any,
							scan_date: new Date().toISOString(),
							scan_duration: Math.floor(Math.random() * 120) + 60,
							vulnerabilities: generateRandomVulnerabilities(
								Math.floor(Math.random() * 10) + 3
							),
							summary: {
								critical_count: Math.floor(Math.random() * 3),
								high_count: Math.floor(Math.random() * 5) + 1,
								medium_count: Math.floor(Math.random() * 7) + 2,
								low_count: Math.floor(Math.random() * 9) + 3,
								info_count: Math.floor(Math.random() * 5),
								total_count: 0,
								risk_score: Math.floor(Math.random() * 60) + 30,
							},
						};

						newScan.summary.total_count =
							newScan.summary.critical_count +
							newScan.summary.high_count +
							newScan.summary.medium_count +
							newScan.summary.low_count +
							newScan.summary.info_count;

						const updatedDashboard = { ...dashboard };
						updatedDashboard.recent_scans = [
							newScan,
							...updatedDashboard.recent_scans.slice(0, 9),
						];
						setDashboard(updatedDashboard);
						setSelectedScan(newScan);
					}
					return 100;
				}
				return newProgress;
			});
		}, 200);

		return () => clearInterval(interval);
	};

	const generateRandomVulnerabilities = (count: number): Vulnerability[] => {
		const vulnerabilityTemplates = [
			{
				name: "SQL Injection",
				description: "SQL injection vulnerability in the login form",
				category: "Injection",
				remediation: "Use parameterized queries or prepared statements",
			},
			{
				name: "Cross-Site Scripting (XSS)",
				description: "Reflected XSS vulnerability in search feature",
				category: "Cross-Site Scripting",
				remediation: "Implement output encoding and Content Security Policy",
			},
			{
				name: "Insecure Direct Object Reference",
				description: "IDOR vulnerability in user profile endpoint",
				category: "Access Control",
				remediation: "Implement proper authorization checks",
			},
			{
				name: "Cross-Site Request Forgery",
				description: "Missing CSRF tokens in form submissions",
				category: "Request Forgery",
				remediation: "Implement anti-CSRF tokens and SameSite cookies",
			},
			{
				name: "Server Information Disclosure",
				description: "HTTP headers reveal server version information",
				category: "Information Disclosure",
				remediation: "Configure web server to suppress version information",
			},
			{
				name: "Outdated TLS Version",
				description: "Server supports TLS 1.0 which is deprecated",
				category: "Cryptography",
				remediation: "Disable TLS 1.0/1.1 and enable only TLS 1.2 and above",
			},
			{
				name: "Insecure Deserialization",
				description: "Vulnerable deserialization in API endpoint",
				category: "Insecure Deserialization",
				remediation: "Implement integrity checks and input validation",
			},
			{
				name: "Default Credentials",
				description: "Default admin credentials in use",
				category: "Authentication",
				remediation:
					"Change default credentials and implement strong password policy",
			},
			{
				name: "Missing Security Headers",
				description: "Application lacks security-related HTTP headers",
				category: "Configuration",
				remediation:
					"Implement security headers like CSP, X-XSS-Protection, etc.",
			},
			{
				name: "Open Directory Listing",
				description: "Directory listing is enabled on the server",
				category: "Configuration",
				remediation: "Disable directory listing in web server configuration",
			},
		];

		const severities: ("Critical" | "High" | "Medium" | "Low" | "Info")[] = [
			"Critical",
			"High",
			"Medium",
			"Low",
			"Info",
		];
		const statuses: ("Open" | "Fixed" | "In Progress" | "False Positive")[] = [
			"Open",
			"Fixed",
			"In Progress",
			"False Positive",
		];
		const components = [
			"Web Application",
			"API Gateway",
			"Database",
			"Frontend",
			"Backend",
			"Authentication Service",
			"Payment Module",
		];

		const vulns: Vulnerability[] = [];

		for (let i = 0; i < count; i++) {
			const template =
				vulnerabilityTemplates[
					Math.floor(Math.random() * vulnerabilityTemplates.length)
				];
			const severity =
				severities[
					Math.floor(Math.random() * (severities.length - (i === 0 ? 1 : 0)))
				]; // Ensure at least one high severity
			const cvss =
				severity === "Critical"
					? 9 + Math.random()
					: severity === "High"
					? 7 + Math.random() * 2
					: severity === "Medium"
					? 4 + Math.random() * 3
					: severity === "Low"
					? 1 + Math.random() * 3
					: 0;

			vulns.push({
				id: `vuln-${Date.now()}-${i}`,
				name: template.name,
				description: template.description,
				severity: severity,
				cve:
					Math.random() > 0.3
						? `CVE-202${Math.floor(Math.random() * 3) + 1}-${
								Math.floor(Math.random() * 10000) + 10000
						  }`
						: undefined,
				cvss: cvss,
				affected_component:
					components[Math.floor(Math.random() * components.length)],
				details: `Detailed technical information about the ${template.name} vulnerability found during scanning.`,
				remediation: template.remediation,
				discovered: new Date(
					Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000
				).toISOString(),
				status:
					Math.random() > 0.7
						? statuses[Math.floor(Math.random() * statuses.length)]
						: "Open",
				category: template.category,
			});
		}

		return vulns;
	};

	// Sample data function - In a real application, this would come from an API
	const getSampleDashboardData = (): Dashboard => {
		// Sample data
		return {
			recent_scans: [
				{
					id: "scan-001",
					asset_name: "company-website.com",
					asset_type: "Application",
					ip_address: "203.0.113.42",
					scan_date: "2023-05-15T08:32:11Z",
					scan_duration: 187,
					vulnerabilities: [
						{
							id: "vuln-001",
							name: "SQL Injection",
							description: "SQL injection vulnerability in login form",
							severity: "High",
							cve: "CVE-2022-36760",
							cvss: 8.5,
							affected_component: "Authentication Module",
							details:
								"The login form does not properly sanitize user input before using it in SQL queries, allowing attackers to execute arbitrary SQL commands.",
							remediation:
								"Use parameterized queries or prepared statements to prevent SQL injection.",
							discovered: "2023-05-15T08:35:42Z",
							status: "Open",
							category: "Injection",
						},
						{
							id: "vuln-002",
							name: "Cross-Site Scripting (XSS)",
							description: "Stored XSS in comment section",
							severity: "Medium",
							cvss: 6.4,
							affected_component: "Blog Module",
							details:
								"The comment section allows users to submit HTML that is stored and rendered without proper sanitization.",
							remediation:
								"Implement proper input validation and output encoding.",
							discovered: "2023-05-15T08:40:18Z",
							status: "Open",
							category: "Cross-Site Scripting",
						},
						{
							id: "vuln-003",
							name: "Missing Security Headers",
							description:
								"Application lacks several security-related HTTP headers",
							severity: "Low",
							cvss: 3.2,
							affected_component: "Web Server Configuration",
							details:
								"The application does not implement security headers such as Content-Security-Policy, X-XSS-Protection, and X-Frame-Options.",
							remediation:
								"Configure the web server to include appropriate security headers.",
							discovered: "2023-05-15T08:42:05Z",
							status: "Open",
							category: "Configuration",
						},
					],
					summary: {
						critical_count: 0,
						high_count: 1,
						medium_count: 1,
						low_count: 1,
						info_count: 0,
						total_count: 3,
						risk_score: 65,
					},
				},
				{
					id: "scan-002",
					asset_name: "internal-api.local",
					asset_type: "API",
					scan_date: "2023-05-14T14:10:22Z",
					scan_duration: 145,
					vulnerabilities: [
						{
							id: "vuln-004",
							name: "Insecure Direct Object Reference",
							description: "IDOR vulnerability in user management API",
							severity: "High",
							cvss: 7.8,
							affected_component: "User Management API",
							details:
								"The API endpoint does not properly verify that the user has permission to access the requested resource.",
							remediation:
								"Implement proper authorization checks for each API endpoint.",
							discovered: "2023-05-14T14:15:42Z",
							status: "In Progress",
							category: "Access Control",
						},
						{
							id: "vuln-005",
							name: "Sensitive Data Exposure",
							description: "API returns sensitive user data in response",
							severity: "Medium",
							cve: "CVE-2023-22685",
							cvss: 5.9,
							affected_component: "User API",
							details:
								"The API endpoint returns sensitive user information that is not needed by the client application.",
							remediation:
								"Implement data minimization and only return necessary information.",
							discovered: "2023-05-14T14:18:10Z",
							status: "Open",
							category: "Information Disclosure",
						},
					],
					summary: {
						critical_count: 0,
						high_count: 1,
						medium_count: 1,
						low_count: 0,
						info_count: 0,
						total_count: 2,
						risk_score: 72,
					},
				},
			],
		};
	};

	// Chart components
	const VulnerabilitySeverityChart = ({ data }: { data: AssetScan | null }) => {
		if (!data) return null;

		const chartData = {
			labels: ["Critical", "High", "Medium", "Low", "Info"],
			datasets: [
				{
					label: "Vulnerabilities by Severity",
					data: [
						data.summary.critical_count,
						data.summary.high_count,
						data.summary.medium_count,
						data.summary.low_count,
						data.summary.info_count,
					],
					backgroundColor: [
						"rgba(220, 53, 69, 0.7)", // Critical - red
						"rgba(253, 126, 20, 0.7)", // High - orange
						"rgba(255, 193, 7, 0.7)", // Medium - yellow
						"rgba(13, 202, 240, 0.7)", // Low - info/blue
						"rgba(108, 117, 125, 0.7)", // Info - gray
					],
					borderColor: [
						"rgb(220, 53, 69)",
						"rgb(253, 126, 20)",
						"rgb(255, 193, 7)",
						"rgb(13, 202, 240)",
						"rgb(108, 117, 125)",
					],
					borderWidth: 1,
				},
			],
		};

		return (
			<div className="h-64 mt-4">
				<Doughnut
					data={chartData}
					options={{
						responsive: true,
						plugins: {
							legend: {
								position: "right",
								labels: {
									boxWidth: 12,
									font: { size: 10 },
								},
							},
							title: {
								display: true,
								text: "Vulnerabilities by Severity",
								font: { size: 14 },
							},
						},
						maintainAspectRatio: false,
					}}
				/>
			</div>
		);
	};

	const VulnerabilityCategoryChart = ({ data }: { data: Vulnerability[] }) => {
		if (!data || data.length === 0) return null;

		// Group vulnerabilities by category
		const categories: { [key: string]: number } = {};
		data.forEach((vuln) => {
			if (categories[vuln.category]) {
				categories[vuln.category]++;
			} else {
				categories[vuln.category] = 1;
			}
		});

		const chartData = {
			labels: Object.keys(categories),
			datasets: [
				{
					label: "Count",
					data: Object.values(categories),
					backgroundColor: "rgba(75, 192, 192, 0.6)",
					borderColor: "rgba(75, 192, 192, 1)",
					borderWidth: 1,
				},
			],
		};

		return (
			<div className="h-64 mt-4">
				<Bar
					data={chartData}
					options={{
						responsive: true,
						indexAxis: "y" as const,
						plugins: {
							legend: {
								display: false,
							},
							title: {
								display: true,
								text: "Vulnerabilities by Category",
								font: { size: 14 },
							},
						},
						maintainAspectRatio: false,
						scales: {
							x: {
								beginAtZero: true,
								title: {
									display: true,
									text: "Count",
								},
							},
						},
					}}
				/>
			</div>
		);
	};

	// Filter vulnerabilities based on selected filters
	const getFilteredVulnerabilities = (vulnerabilities: Vulnerability[]) => {
		return vulnerabilities.filter((vuln) => {
			let matchesCategory =
				filterCategory === "All" || vuln.category === filterCategory;
			let matchesSeverity =
				filterSeverity === "All" || vuln.severity === filterSeverity;
			let matchesStatus =
				filterStatus === "All" || vuln.status === filterStatus;

			return matchesCategory && matchesSeverity && matchesStatus;
		});
	};

	// Get unique categories from vulnerabilities
	const getUniqueCategories = (vulnerabilities: Vulnerability[]) => {
		const categories = new Set<string>();
		vulnerabilities.forEach((vuln) => categories.add(vuln.category));
		return Array.from(categories);
	};

	// Scan results view
	const renderScanResults = () => {
		if (!selectedScan) {
			return null;
		}

		const uniqueCategories = getUniqueCategories(selectedScan.vulnerabilities);
		const filteredVulnerabilities = getFilteredVulnerabilities(
			selectedScan.vulnerabilities
		);

		return (
			<div className="space-y-6 mb-8">
				{/* Scan header */}
				<div className="bg-white rounded-lg shadow p-6">
					<div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
						<div>
							<h2 className="text-2xl font-bold text-gray-800">
								Scan Results: {selectedScan.asset_name}
							</h2>
							<p className="text-gray-600">
								{selectedScan.asset_type} • Scanned on{" "}
								{new Date(selectedScan.scan_date).toLocaleString()}
							</p>
						</div>
					</div>

					<div className="mt-6">
						<h3 className="text-lg font-semibold mb-4">Analytics Overview</h3>
						<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
							<div className="bg-white border border-gray-200 rounded-lg p-4">
								<VulnerabilitySeverityChart data={selectedScan} />
							</div>
							<div className="bg-white border border-gray-200 rounded-lg p-4">
								<VulnerabilityCategoryChart
									data={selectedScan.vulnerabilities}
								/>
							</div>
						</div>
					</div>
				</div>

				{/* Vulnerabilities list with filters */}
				<div className="bg-white rounded-lg shadow overflow-hidden">
					<div className="px-6 py-4 border-b border-gray-200">
						<h2 className="text-xl font-semibold mb-4">Vulnerabilities</h2>

						{/* Filters */}
						<div className="flex flex-wrap gap-4 mb-4">
							<div>
								<label className="block text-sm font-medium text-gray-700 mb-1">
									Category
								</label>
								<select
									value={filterCategory}
									onChange={(e) => setFilterCategory(e.target.value)}
									className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
								>
									<option value="All">All Categories</option>
									{uniqueCategories.map((category) => (
										<option key={category} value={category}>
											{category}
										</option>
									))}
								</select>
							</div>

							<div>
								<label className="block text-sm font-medium text-gray-700 mb-1">
									Severity
								</label>
								<select
									value={filterSeverity}
									onChange={(e) => setFilterSeverity(e.target.value)}
									className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
								>
									<option value="All">All Severities</option>
									<option value="Critical">Critical</option>
									<option value="High">High</option>
									<option value="Medium">Medium</option>
									<option value="Low">Low</option>
									<option value="Info">Info</option>
								</select>
							</div>

							<div>
								<label className="block text-sm font-medium text-gray-700 mb-1">
									Status
								</label>
								<select
									value={filterStatus}
									onChange={(e) => setFilterStatus(e.target.value)}
									className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
								>
									<option value="All">All Statuses</option>
									<option value="Open">Open</option>
									<option value="In Progress">In Progress</option>
									<option value="Fixed">Fixed</option>
									<option value="False Positive">False Positive</option>
								</select>
							</div>

							<div className="ml-auto self-end">
								<button
									onClick={() => {
										setFilterCategory("All");
										setFilterSeverity("All");
										setFilterStatus("All");
									}}
									className="px-3 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
								>
									Reset Filters
								</button>
							</div>
						</div>

						<div className="text-sm text-gray-500">
							Showing {filteredVulnerabilities.length} of{" "}
							{selectedScan.vulnerabilities.length} vulnerabilities
						</div>
					</div>

					<div className="overflow-x-auto">
						<table className="min-w-full divide-y divide-gray-200">
							<thead className="bg-gray-50">
								<tr>
									<th
										scope="col"
										className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>
										Name
									</th>
									<th
										scope="col"
										className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>
										Severity
									</th>
									{selectedScan.vulnerabilities.some((v) => v.cvss) && (
										<th
											scope="col"
											className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
										>
											CVSS
										</th>
									)}
									<th
										scope="col"
										className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>
										Category
									</th>
									<th
										scope="col"
										className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>
										Status
									</th>
									<th
										scope="col"
										className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>
										Actions
									</th>
								</tr>
							</thead>
							<tbody className="bg-white divide-y divide-gray-200">
								{filteredVulnerabilities.map((vuln) => (
									<tr key={vuln.id} className="hover:bg-gray-50">
										<td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
											<div>
												{vuln.name}
												{vuln.cve && (
													<div className="text-xs text-gray-500 mt-1">
														{vuln.cve}
													</div>
												)}
											</div>
										</td>
										<td className="px-6 py-4 whitespace-nowrap">
											<span
												className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
													vuln.severity === "Critical"
														? "bg-red-100 text-red-800"
														: vuln.severity === "High"
														? "bg-orange-100 text-orange-800"
														: vuln.severity === "Medium"
														? "bg-yellow-100 text-yellow-800"
														: vuln.severity === "Low"
														? "bg-blue-100 text-blue-800"
														: "bg-gray-100 text-gray-800"
												}`}
											>
												{vuln.severity}
											</span>
										</td>
										{selectedScan.vulnerabilities.some((v) => v.cvss) && (
											<td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
												{vuln.cvss ? vuln.cvss.toFixed(1) : "N/A"}
											</td>
										)}
										<td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
											{vuln.category}
										</td>
										<td className="px-6 py-4 whitespace-nowrap">
											<span
												className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
													vuln.status === "Open"
														? "bg-red-100 text-red-800"
														: vuln.status === "In Progress"
														? "bg-blue-100 text-blue-800"
														: vuln.status === "Fixed"
														? "bg-green-100 text-green-800"
														: "bg-gray-100 text-gray-800"
												}`}
											>
												{vuln.status}
											</span>
										</td>
										<td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
											<button
												onClick={() => setSelectedVulnerability(vuln)}
												className="text-blue-600 hover:text-blue-900"
											>
												View Details
											</button>
										</td>
									</tr>
								))}
							</tbody>
						</table>

						{filteredVulnerabilities.length === 0 && (
							<div className="p-6 text-center text-gray-500">
								No vulnerabilities match the selected filters
							</div>
						)}
					</div>
				</div>
			</div>
		);
	};

	// Vulnerability details modal
	const VulnerabilityDetailsModal = ({
		vulnerability,
		onClose,
	}: {
		vulnerability: Vulnerability | null;
		onClose: () => void;
	}) => {
		if (!vulnerability) return null;

		return (
			<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
				<div className="bg-white rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
					<div className="p-6">
						<div className="flex justify-between items-start mb-4">
							<div>
								<div className="flex items-center">
									<h2 className="text-xl font-bold text-gray-900 mr-2">
										{vulnerability.name}
									</h2>
									<span
										className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
											vulnerability.severity === "Critical"
												? "bg-red-100 text-red-800"
												: vulnerability.severity === "High"
												? "bg-orange-100 text-orange-800"
												: vulnerability.severity === "Medium"
												? "bg-yellow-100 text-yellow-800"
												: vulnerability.severity === "Low"
												? "bg-blue-100 text-blue-800"
												: "bg-gray-100 text-gray-800"
										}`}
									>
										{vulnerability.severity}
									</span>
								</div>
								{vulnerability.cve && (
									<p className="text-sm text-gray-500 mt-1">
										{vulnerability.cve}
									</p>
								)}
							</div>
							<button
								onClick={onClose}
								className="text-gray-500 hover:text-gray-700"
							>
								<svg
									className="w-5 h-5"
									fill="currentColor"
									viewBox="0 0 20 20"
								>
									<path
										fillRule="evenodd"
										d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
										clipRule="evenodd"
									/>
								</svg>
							</button>
						</div>

						<div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
							<div>
								<p className="text-sm text-gray-600 mb-1">Affected Component</p>
								<p className="font-medium">
									{vulnerability.affected_component}
								</p>
							</div>
							<div>
								<p className="text-sm text-gray-600 mb-1">Status</p>
								<p className="font-medium">
									<span
										className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
											vulnerability.status === "Open"
												? "bg-red-100 text-red-800"
												: vulnerability.status === "In Progress"
												? "bg-blue-100 text-blue-800"
												: vulnerability.status === "Fixed"
												? "bg-green-100 text-green-800"
												: "bg-gray-100 text-gray-800"
										}`}
									>
										{vulnerability.status}
									</span>
								</p>
							</div>
							<div>
								<p className="text-sm text-gray-600 mb-1">Category</p>
								<p className="font-medium">{vulnerability.category}</p>
							</div>
							<div>
								<p className="text-sm text-gray-600 mb-1">Discovered</p>
								<p className="font-medium">
									{new Date(vulnerability.discovered).toLocaleString()}
								</p>
							</div>
							{vulnerability.cvss && (
								<div>
									<p className="text-sm text-gray-600 mb-1">CVSS Score</p>
									<p className="font-medium">
										{vulnerability.cvss.toFixed(1)}/10
									</p>
								</div>
							)}
						</div>

						<div className="mb-6">
							<h3 className="text-md font-semibold mb-2">Description</h3>
							<p className="text-gray-700">{vulnerability.description}</p>
						</div>

						<div className="mb-6">
							<h3 className="text-md font-semibold mb-2">Technical Details</h3>
							<div className="bg-gray-50 rounded-md p-4 font-mono text-sm whitespace-pre-wrap">
								{vulnerability.details}
							</div>
						</div>

						<div className="mb-6">
							<h3 className="text-md font-semibold mb-2">Remediation</h3>
							<p className="text-gray-700">{vulnerability.remediation}</p>
						</div>

						<div className="mt-6 flex justify-end">
							<button
								onClick={onClose}
								className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
							>
								Close
							</button>
						</div>
					</div>
				</div>
			</div>
		);
	};

	// Tool information section
	const renderToolInfo = () => {
		return (
			<div className="bg-white rounded-lg shadow p-6 mb-8">
				<h2 className="text-2xl font-bold mb-4">Vulnerability Scanner</h2>
				<p className="text-gray-700 mb-6">
					A comprehensive scanner for identifying security vulnerabilities
					across your infrastructure. Our vulnerability scanner continuously
					monitors your applications, servers, and networks to detect potential
					security weaknesses before they can be exploited.
				</p>

				<h3 className="text-xl font-semibold mb-3">Key Features</h3>
				<div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
					<div className="border border-gray-200 rounded-lg p-4">
						<h4 className="text-lg font-medium mb-2">Continuous Scanning</h4>
						<p className="text-gray-600">
							Automatically scan your assets on a regular basis to maintain an
							up-to-date view of your security posture and catch new
							vulnerabilities as they emerge.
						</p>
					</div>

					<div className="border border-gray-200 rounded-lg p-4">
						<h4 className="text-lg font-medium mb-2">Detailed Reporting</h4>
						<p className="text-gray-600">
							Generate comprehensive reports with actionable remediation
							guidance, prioritization based on risk, and executive summaries
							for stakeholders.
						</p>
					</div>

					<div className="border border-gray-200 rounded-lg p-4">
						<h4 className="text-lg font-medium mb-2">Risk Prioritization</h4>
						<p className="text-gray-600">
							Intelligent risk scoring based on CVSS, asset importance, and
							exploit availability to help you focus on what matters most.
						</p>
					</div>

					<div className="border border-gray-200 rounded-lg p-4">
						<h4 className="text-lg font-medium mb-2">CI/CD Integration</h4>
						<p className="text-gray-600">
							Integrate security scanning directly into your CI/CD pipelines to
							catch vulnerabilities before they reach production environments.
						</p>
					</div>
				</div>

				<h3 className="text-xl font-semibold mb-3">Supported Asset Types</h3>
				<div className="grid grid-cols-2 md:grid-cols-3 gap-2 mb-6">
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">Web Applications</div>
						<div className="text-sm text-gray-600">OWASP Top 10 & more</div>
					</div>
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">APIs</div>
						<div className="text-sm text-gray-600">REST, GraphQL, SOAP</div>
					</div>
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">Network Infrastructure</div>
						<div className="text-sm text-gray-600">
							Firewalls, switches, routers
						</div>
					</div>
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">Servers</div>
						<div className="text-sm text-gray-600">Windows, Linux, Unix</div>
					</div>
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">Cloud Resources</div>
						<div className="text-sm text-gray-600">AWS, Azure, GCP</div>
					</div>
					<div className="bg-gray-50 p-3 rounded-lg">
						<div className="font-medium">Containers</div>
						<div className="text-sm text-gray-600">Docker, Kubernetes</div>
					</div>
				</div>
			</div>
		);
	};

	// Main return
	return (
		<div className="max-w-7xl mx-auto px-4 py-8">
			<div className="mb-6">
				<div className="flex items-center mb-2">
					<Link
						href="/tools"
						className="text-blue-600 hover:text-blue-800 mr-2"
					>
						&larr; Tools Dashboard
					</Link>
				</div>
				<h1 className="text-3xl font-bold">Vulnerability Scanner</h1>
				<p className="text-gray-600 mt-1">
					Comprehensive security scanning across your infrastructure
				</p>
			</div>

			{/* Scan Input Form */}
			<div className="bg-white rounded-lg shadow p-6 mb-8">
				<h2 className="text-xl font-semibold mb-4">
					Start New Vulnerability Scan
				</h2>
				<form onSubmit={handleStartScan} className="space-y-4">
					<div>
						<label
							htmlFor="targetAsset"
							className="block text-sm font-medium text-gray-700 mb-1"
						>
							Target URL, IP, or Hostname
						</label>
						<input
							type="text"
							id="targetAsset"
							value={targetAsset}
							onChange={(e) => setTargetAsset(e.target.value)}
							placeholder="example.com or 192.168.1.1"
							className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
							required
						/>
					</div>
					<div>
						<label
							htmlFor="assetType"
							className="block text-sm font-medium text-gray-700 mb-1"
						>
							Asset Type
						</label>
						<select
							id="assetType"
							value={assetType}
							onChange={(e) => setAssetType(e.target.value)}
							className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							<option value="Application">Web Application</option>
							<option value="API">API</option>
							<option value="Server">Server</option>
							<option value="Network">Network</option>
							<option value="Cloud">Cloud Resource</option>
							<option value="Container">Container</option>
						</select>
					</div>
					<div className="flex justify-end">
						<button
							type="submit"
							disabled={scanInProgress}
							className={`px-4 py-2 rounded-md ${
								scanInProgress
									? "bg-gray-400 cursor-not-allowed"
									: "bg-blue-600 hover:bg-blue-700"
							} text-white font-medium transition-colors`}
						>
							{scanInProgress ? "Scanning..." : "Start Scan"}
						</button>
					</div>

					{scanInProgress && (
						<div className="mt-4">
							<div className="w-full bg-gray-200 rounded-full h-2.5">
								<div
									className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
									style={{ width: `${scanProgress}%` }}
								></div>
							</div>
							<p className="text-sm text-center mt-2 text-gray-600">
								Scanning... {Math.round(scanProgress)}% complete
							</p>
						</div>
					)}
				</form>
			</div>

			{/* Scan Results (only shown when a scan is selected) */}
			{selectedScan && renderScanResults()}

			{/* Tool Information Section */}
			{renderToolInfo()}

			{/* Modals */}
			{selectedVulnerability && (
				<VulnerabilityDetailsModal
					vulnerability={selectedVulnerability}
					onClose={() => setSelectedVulnerability(null)}
				/>
			)}
		</div>
	);
}
